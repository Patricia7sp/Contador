{"version":3,"sources":["logo.svg","component/Home.js","component/BotaoGol.js","component/Time.js","component/Reiniciar.js","component/Partida.js","Container/PlacarContainer.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","BotaoGol","event","preventDefault","this","props","marcarGol","onClick","handleClick","bind","React","Component","Time","nome","gols","Reiniciar","reiniciar","Partida","estadio","data","horario","PlacarContainer","state","gols_casa","gols_visitante","reiniciar_partida","setState","partida","casa","visitante","marcarGolCasa","marcarGolVisitante","clima","defaultProps","dados","Hora","App","tempo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,2MCe5BC,MAXf,WACI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,sECUKC,E,0KAfAC,GACVA,EAAMC,iBACNC,KAAKC,MAAMC,c,+BAMZ,OACI,4BAASC,QAASH,KAAKI,YAAYC,KAAKL,OAAxC,e,GAVeM,IAAMC,WCcdC,E,uKAZX,OACE,6BACE,4BAAKR,KAAKC,MAAMQ,MAChB,4BAAKT,KAAKC,MAAMS,KAAhB,KACA,kBAAC,EAAD,CAAUR,UAAWF,KAAKC,MAAMC,iB,GANrBI,IAAMC,WCiBVI,E,0KAhBAb,GACVA,EAAMC,iBACNC,KAAKC,MAAMW,c,+BAMZ,OAEC,4BAAST,QAASH,KAAKI,YAAYC,KAAKL,OAAxC,qB,GAXmBM,IAAMC,WCsBfM,E,uKApBX,OACE,6BACE,gCAAMb,KAAKC,MAAMa,QAAjB,KACA,6BACE,kCAAQd,KAAKC,MAAMc,MAEnB,kCAAQf,KAAKC,MAAMe,QAAnB,KACA,kCAAQhB,KAAKC,MAAMW,UAAnB,KAGA,4BACA,kBAAC,EAAD,CAAaA,UAAWZ,KAAKC,MAAMW,mB,GAbvBN,IAAMC,WCGtBU,E,kDAEJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAW,EACXC,eAAgB,EAChBC,kBAAmB,GALT,E,4DAUXrB,KAAKsB,SAAS,CACZH,UAAWnB,KAAKkB,MAAMC,UAAY,M,2CAOrCnB,KAAKsB,SAAS,CACXF,eAAgBpB,KAAKkB,MAAME,eAAiB,M,kCAM/CpB,KAAKsB,SAAS,CACZD,kBAAmBrB,KAAKkB,MAAMG,kBAAoB,M,+BAK5C,IAAD,EAC4BrB,KAAKC,MAAjCsB,EADA,EACAA,QAASC,EADT,EACSA,KAAMC,EADf,EACeA,UACtB,OACE,6BACE,6BACE,oCACA,kBAAC,EAAD,CAAMhB,KAAMe,EAAKf,KACXC,KAAMV,KAAKkB,MAAMC,UACjBjB,UAAWF,KAAK0B,cAAcrB,KAAKL,QAC3C,6BACE,kBAAC,EAAD,iBAAauB,EAAb,CAAqBA,QAASvB,KAAKkB,MAAMG,kBAAmBT,UAAWZ,KAAKY,UAAUP,KAAKL,UAE7F,6BACE,2CACA,kBAAC,EAAD,CAAMS,KAAMgB,EAAUhB,KACjBC,KAAMV,KAAKkB,MAAME,eACjBlB,UAAWF,KAAK2B,mBAAmBtB,KAAKL,UAI/C,4BAAKA,KAAKC,MAAM2B,Y,GArDMtB,IAAMC,WA2DrBU,IAOfA,EAAgBY,aAAc,CAC5BD,MAAO,cCnET,IAAME,EAAQ,CACZP,QAAS,CACNT,QAAS,aACTC,KAAM,aACNgB,KAAM,SAGTP,KAAM,CACJf,KAAM,UAIRgB,UAAW,CAEThB,KAAM,cAeKuB,E,uKAVX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,iBAAqBF,EAArB,CAA4BG,MAAO,W,GALzB3B,IAAMC,WCXJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,QDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a80cfbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06d881ab.svg\";","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nfunction Home () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>Bem Vindo ao Placar das Olimpiadas!</h1>\n        </header>\n      </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\n\nclass BotaoGol extends React.Component {\n   handleClick(event){\n     event.preventDefault();\n     this.props.marcarGol();\n   }\n\n\n\n  render() {\n    return (\n        <button  onClick={this.handleClick.bind(this)}> Gol!! </button>\n       \n    );\n  }\n}\n\nexport default BotaoGol;\n","import React from 'react';\nimport BotaoGol from './BotaoGol';\n\nclass Time extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>{this.props.nome}</h1>\n        <h2>{this.props.gols} </h2>\n        <BotaoGol marcarGol={this.props.marcarGol}/>\n    \n      </div>\n      \n    );\n  }\n}\n\nexport default Time;","import React from 'react';\n\n\nclass Reiniciar extends React.Component {\n   handleClick(event){\n     event.preventDefault();\n     this.props.reiniciar();\n   }\n\n\n\n  render() {\n    return (\n      \n     <button  onClick={this.handleClick.bind(this)}> Reiniciar!! </button>\n    \n    );\n  }\n}\n\nexport default Reiniciar;\n","import React from 'react';\nimport Reiniciar from './Reiniciar';\n\nclass Partida extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2> {this.props.estadio} </h2>\n        <div>\n          <span> {this.props.data}</span>\n          \n          <span> {this.props.horario} </span>\n          <span> {this.props.reiniciar} </span>\n          \n\n          <h2>\n          <Reiniciar   reiniciar={this.props.reiniciar}/>\n          </h2>\n    \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Partida;","import React from 'react';\nimport Time from '../component/Time';\nimport Partida from '../component/Partida';\nimport PropTypes from 'prop-types';\n\n\nclass PlacarContainer extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      gols_casa: 0,\n      gols_visitante: 0,\n      reiniciar_partida: 0,\n    };  \n  }\n\n  marcarGolCasa(){\n     this.setState({\n       gols_casa: this.state.gols_casa + 1,\n\n     });\n\n  }\n\n  marcarGolVisitante(){\n    this.setState({\n       gols_visitante: this.state.gols_visitante + 1,\n    });\n  }\n\n  reiniciar () {\n\n    this.setState({\n      reiniciar_partida: this.state.reiniciar_partida = 0,\n\n    });\n  }\n\n  render() {\n    const {partida, casa, visitante} = this.props;\n    return (\n      <div>\n        <div>\n          <h2>Casa</h2>\n          <Time nome={casa.nome } \n                gols={this.state.gols_casa}\n                marcarGol={this.marcarGolCasa.bind(this)}/>\n        <div>\n          <Partida {...partida}partida={this.state.reiniciar_partida} reiniciar={this.reiniciar.bind(this)}/>\n        </div>\n        <div>\n          <h2> Visitante </h2>\n          <Time nome={visitante.nome} \n               gols={this.state.gols_visitante}\n               marcarGol={this.marcarGolVisitante.bind(this)}/>\n        </div>\n        \n        </div>\n        <di>{this.props.clima}</di>\n      </div>\n    );\n  }\n}\n\nexport default PlacarContainer ;\n\nPlacarContainer.propTypes= {\n  clima: PropTypes.string,\n  tempo: PropTypes.number.isRequired,\n};\n\nPlacarContainer.defaultProps ={\n  clima: 'Ensolarado',\n\n};","import React from 'react';\nimport Home from '../component/Home';\nimport PlacarContainer from '../Container/PlacarContainer';\n \n\n\nconst dados = {\n  partida: {\n     estadio: \"Morumbi/SP\",\n     data: \"30/06/2014\",\n     Hora: \"18hrs\",\n  },\n\n  casa: {\n    nome: \"Brasil\",\n\n  },\n\n  visitante: {\n    \n    nome: \"Argentina\",\n  }\n}\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Home />\n        <PlacarContainer {...dados} tempo={92} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('App')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}